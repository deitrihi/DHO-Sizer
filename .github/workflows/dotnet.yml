# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  
jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
    
    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Merge commit message
      run: |
        git log -1 --pretty=%B > message.txt
        echo "::set-output name=message::$(Get-Content message.txt)"
      id: merge_message
      # 최신 커밋 메시지를 추출하고 output 변수에 저장합니다.

    - name: Build
      if: startsWith(steps.merge_message.outputs.message, 'Release')
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Collect artifacts
      shell: pwsh
      run: |
          New-Item -Type Directory dist -Force | Out-Null
          Copy-Item "DHOSizer/bin/Release/**" dist -Recurse -Force

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
          name: DHO-Sizer
          path: dist
          retention-days: 7
          
    - name: Get Release Version
      if: startsWith(steps.merge_message.outputs.message, 'Release') && job.status == 'success'
      run: |
        echo "::set-output name=version::$(("${{steps.merge_message.outputs.message}}" -replace 'Release ', ''))"
      id: extract_release_version
      # 'Release'로 시작하는 커밋 메시지를 가지고 성공적으로 빌드되었을 때, 버전 정보를 추출하여 output 변수에 저장합니다.
    
    - name: Create release tag
      if: startsWith(steps.merge_message.outputs.message, 'Release') && job.status == 'success'
      uses: actions/create-release@v1 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_release_version.outputs.version }}
        release_name: Release ${{ steps.extract_release_version.outputs.version }} v${{ github.run_number }}
        body: ${{ steps.merge_message.outputs.message }}
        draft: false
        prerelease: false
      # 'Release'로 시작하는 커밋 메시지를 가지고 성공적으로 빌드되었을 때, GitHub에 릴리즈 태그를 생성합니다.
